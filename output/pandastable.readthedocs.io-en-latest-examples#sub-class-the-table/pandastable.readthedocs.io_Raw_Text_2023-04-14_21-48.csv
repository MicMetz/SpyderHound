Raw Text:
	1: Code
	2: Examples
	3: —
	4: pandastable
	5: documentation
	6: pandastable
	7: latest
	8: Introduction
	9: Current
	10: Features
	11: The
	12: DataExplore
	13: application
	14: Links
	15: Citation
	16: Installation
	17: Using
	18: DataExplore
	19: Code
	20: Examples
	21: Basics
	22: Sub-class
	23: the
	24: Table
	25: Table
	26: methods
	27: Accessing
	28: and
	29: modifying
	30: data
	31: directly
	32: Set
	33: table
	34: attributes
	35: Set
	36: Preferences
	37: Table
	38: Coloring
	39: Writing
	40: DataExplore
	41: Plugins
	42: Implementing
	43: a
	44: plugin
	45: Non-table
	46: based
	47: plugins
	48: Freezing
	49: the
	50: app
	51: pandastable
	52: pandastable
	53: Docs
	54: »
	55: Code
	56: Examples
	57: Edit
	58: on
	59: GitHub
	60: Code
	61: ExamplesÂ¶
	62: This
	63: section
	64: is
	65: for
	66: python
	67: programmers
	68: you
	69: want
	70: to
	71: use
	72: the
	73: table
	74: widget
	75: in
	76: their
	77: own
	78: programs.
	79: BasicsÂ¶
	80: Create
	81: a
	82: parent
	83: frame
	84: and
	85: then
	86: add
	87: the
	88: table
	89: to
	90: it:
	91: from
	92: tkinter
	93: import
	94: *
	95: from
	96: pandastable
	97: import
	98: Table
	99: #assuming
	100: parent
	101: is
	102: the
	103: frame
	104: in
	105: which
	106: you
	107: want
	108: to
	109: place
	110: the
	111: table
	112: pt
	113: =
	114: Table(parent)
	115: pt.show()
	116: Update
	117: the
	118: table:
	119: #alter
	120: the
	121: DataFrame
	122: in
	123: some
	124: way,
	125: then
	126: update
	127: pt.redraw()
	128: Import
	129: a
	130: csv
	131: file:
	132: pt.importCSV('test.csv')
	133: A
	134: class
	135: for
	136: launching
	137: a
	138: basic
	139: table
	140: in
	141: a
	142: frame:
	143: from
	144: tkinter
	145: import
	146: *
	147: from
	148: pandastable
	149: import
	150: Table,
	151: TableModel,
	152: config
	153: class
	154: TestApp(Frame):
	155: """Basic
	156: test
	157: frame
	158: for
	159: the
	160: table"""
	161: def
	162: __init__(self,
	163: parent=None):
	164: self.parent
	165: =
	166: parent
	167: Frame.__init__(self)
	168: self.main
	169: =
	170: self.master
	171: self.main.geometry('600x400+200+100')
	172: self.main.title('Table
	173: app')
	174: f
	175: =
	176: Frame(self.main)
	177: f.pack(fill=BOTH,expand=1)
	178: df
	179: =
	180: TableModel.getSampleData()
	181: self.table
	182: =
	183: pt
	184: =
	185: Table(f,
	186: dataframe=df,
	187: showtoolbar=True,
	188: showstatusbar=True)
	189: pt.show()
	190: #set
	191: some
	192: options
	193: options
	194: =
	195: {'colheadercolor':'green','floatprecision':
	196: 5}
	197: config.apply_options(options,
	198: pt)
	199: pt.show()
	200: return
	201: app
	202: =
	203: TestApp()
	204: #launch
	205: the
	206: app
	207: app.mainloop()
	208: Sub-class
	209: the
	210: TableÂ¶
	211: Override
	212: the
	213: right
	214: click
	215: popup
	216: menu:
	217: class
	218: MyTable(Table):
	219: """Custom
	220: table
	221: class
	222: inherits
	223: from
	224: Table.
	225: You
	226: can
	227: then
	228: override
	229: required
	230: methods"""
	231: def
	232: __init__(self,
	233: parent=None,
	234: **kwargs):
	235: Table.__init__(self,
	236: parent,
	237: **kwargs)
	238: return
	239: def
	240: handle_left_click(self,
	241: event):
	242: """Example
	243: -
	244: override
	245: left
	246: click"""
	247: Table.handle_left_click(self,
	248: event)
	249: #do
	250: custom
	251: code
	252: here
	253: return
	254: def
	255: popupMenu(self,
	256: event,
	257: rows=None,
	258: cols=None,
	259: outside=None):
	260: """Custom
	261: right
	262: click
	263: menu"""
	264: popupmenu
	265: =
	266: Menu(self,
	267: tearoff
	268: =
	269: 0)
	270: def
	271: popupFocusOut(event):
	272: popupmenu.unpost()
	273: #
	274: add
	275: commands
	276: here
	277: #
	278: self.app
	279: is
	280: a
	281: reference
	282: to
	283: the
	284: parent
	285: app
	286: popupmenu.add_command(label='do
	287: stuff',
	288: command=self.app.stuff)
	289: popupmenu.bind("<FocusOut>",
	290: popupFocusOut)
	291: popupmenu.focus_set()
	292: popupmenu.post(event.x_root,
	293: event.y_root)
	294: return
	295: popupmenu
	296: Table
	297: methodsÂ¶
	298: You
	299: can
	300: use
	301: the
	302: Table
	303: class
	304: methods
	305: to
	306: directly
	307: access
	308: data
	309: and
	310: perform
	311: many
	312: more
	313: functions.
	314: Check
	315: the
	316: API
	317: for
	318: all
	319: the
	320: methods.
	321: Some
	322: examples
	323: are
	324: given
	325: here:
	326: #add
	327: 10
	328: empty
	329: columns
	330: table.autoAddColumns(10)
	331: #resize
	332: the
	333: columns
	334: to
	335: fit
	336: the
	337: data
	338: better
	339: table.autoResizeColumns()
	340: #clear
	341: the
	342: current
	343: formatting
	344: table.clearFormatting()
	345: #reduce
	346: column
	347: witdths
	348: proportionally
	349: table.contractColumns()
	350: #get
	351: selected
	352: column
	353: table.getSelectedColumn()
	354: #sort
	355: by
	356: column
	357: index
	358: 0
	359: table.sortTable(0)
	360: #enlarge
	361: all
	362: table
	363: elements
	364: table.zoomIn()
	365: #set
	366: row
	367: colors
	368: table.setRowColors(rows=range(2,100,2),
	369: clr='lightblue',
	370: cols='all')
	371: #delete
	372: selected
	373: rows
	374: table.setSelectedRows([[4,6,8,10]])
	375: #delete
	376: current
	377: row
	378: table.deleteRow()
	379: #set
	380: current
	381: row
	382: table.setSelectedRow(10)
	383: #insert
	384: below
	385: current
	386: row
	387: table.insertRow()
	388: Accessing
	389: and
	390: modifying
	391: data
	392: directlyÂ¶
	393: The
	394: tables
	395: use
	396: a
	397: pandas
	398: DataFrame
	399: object
	400: for
	401: storing
	402: the
	403: underlying
	404: data.
	405: If
	406: you
	407: are
	408: not
	409: familiar
	410: with
	411: pandas
	412: you
	413: should
	414: learn
	415: the
	416: basics
	417: if
	418: you
	419: need
	420: to
	421: access
	422: or
	423: manipulate
	424: the
	425: table
	426: data.
	427: See
	428: http://pandas.pydata.org/pandas-docs/stable/10min.html
	429: Each
	430: table
	431: has
	432: an
	433: object
	434: called
	435: model
	436: with
	437: has
	438: the
	439: dataframe
	440: inside
	441: it.
	442: The
	443: dataframe
	444: is
	445: referred
	446: to
	447: as
	448: df.
	449: So
	450: to
	451: access
	452: the
	453: data
	454: on
	455: a
	456: table
	457: you
	458: can
	459: use:
	460: df
	461: =
	462: table.model.df
	463: Examples
	464: of
	465: simple
	466: dataframe
	467: operations.
	468: Remember
	469: when
	470: you
	471: update
	472: the
	473: dataframe
	474: you
	475: will
	476: need
	477: to
	478: call
	479: table.redraw()
	480: to
	481: see
	482: the
	483: changes
	484: reflected:
	485: df.drop(0)
	486: #delete
	487: column
	488: with
	489: this
	490: index
	491: df.T
	492: #transpose
	493: the
	494: DataFrame
	495: df.drop(columns=['x'])
	496: Set
	497: table
	498: attributesÂ¶
	499: You
	500: can
	501: set
	502: table
	503: attributes
	504: directly
	505: such
	506: as
	507: these
	508: examples:
	509: table.textcolor
	510: =
	511: 'blue'
	512: table.cellbackgr
	513: =
	514: 'white'
	515: table.boxoutlinecolor
	516: =
	517: 'black'
	518: #set
	519: header
	520: colors
	521: self.table.rowheader.bgcolor
	522: =
	523: 'orange'
	524: self.table.colheader.bgcolor
	525: =
	526: 'lightgreen'
	527: self.table.colheader.textcolor
	528: =
	529: 'black'
	530: #make
	531: editable
	532: or
	533: not
	534: table.editable
	535: =
	536: False
	537: Set
	538: PreferencesÂ¶
	539: Preferences
	540: are
	541: normally
	542: loaded
	543: from
	544: a
	545: configuration
	546: file
	547: that
	548: can
	549: be
	550: edited
	551: manually
	552: or
	553: via
	554: the
	555: menu.
	556: You
	557: can
	558: also
	559: programmatically
	560: set
	561: these
	562: preferences
	563: using
	564: the
	565: config
	566: module:
	567: #load
	568: from
	569: a
	570: config
	571: file
	572: if
	573: you
	574: need
	575: to
	576: (done
	577: by
	578: default
	579: when
	580: tables
	581: are
	582: created)
	583: options
	584: =
	585: config.load_options()
	586: #options
	587: is
	588: a
	589: dict
	590: that
	591: you
	592: can
	593: set
	594: yourself
	595: options
	596: =
	597: {'floatprecision':
	598: 2}
	599: config.apply_options(options,
	600: table)
	601: You
	602: can
	603: set
	604: the
	605: following
	606: configuration
	607: values:
	608: {'align':
	609: 'w',
	610: 'cellbackgr':
	611: '#F4F4F3',
	612: 'cellwidth':
	613: 80,
	614: 'floatprecision':
	615: 2,
	616: 'thousandseparator':
	617: '',
	618: 'font':
	619: 'Arial',
	620: 'fontsize':
	621: 12,
	622: 'fontstyle':
	623: '',
	624: 'grid_color':
	625: '#ABB1AD',
	626: 'linewidth':
	627: 1,
	628: 'rowheight':
	629: 22,
	630: 'rowselectedcolor':
	631: '#E4DED4',
	632: 'textcolor':
	633: 'black'}
	634: Table
	635: ColoringÂ¶
	636: You
	637: can
	638: set
	639: column
	640: colors
	641: by
	642: setting
	643: the
	644: key
	645: in
	646: the
	647: columncolors
	648: dict
	649: to
	650: a
	651: valid
	652: hex
	653: color
	654: code.
	655: Then
	656: just
	657: redraw:
	658: table.columncolors['mycol']
	659: =
	660: '#dcf1fc'
	661: #color
	662: a
	663: specific
	664: column
	665: table.redraw()
	666: You
	667: can
	668: set
	669: row
	670: and
	671: cell
	672: colors
	673: in
	674: several
	675: ways.
	676: table.rowcolors
	677: is
	678: a
	679: pandas
	680: dataframe
	681: that
	682: mirrors
	683: the
	684: current
	685: table
	686: and
	687: stores
	688: a
	689: color
	690: for
	691: each
	692: cell.
	693: It
	694: only
	695: adds
	696: columns
	697: as
	698: needed.
	699: You
	700: can
	701: update
	702: this
	703: manually
	704: but
	705: it
	706: is
	707: easiest
	708: to
	709: use
	710: the
	711: following
	712: methods:
	713: table.setRowColors(rows,
	714: color)
	715: #using
	716: row
	717: numbers
	718: table.setColorByMask(column,
	719: mask,
	720: color)
	721: #using
	722: a
	723: pre-defined
	724: mask
	725: table.redraw()
	726: To
	727: color
	728: by
	729: column
	730: values:
	731: table.multiplecollist
	732: =
	733: [cols]
	734: #set
	735: the
	736: selected
	737: columns
	738: table.setColorbyValue()
	739: table.redraw()
	740: To
	741: clear
	742: formatting:
	743: table.clearFormatting()
	744: table.redraw()
	745: Note:
	746: You
	747: should
	748: generally
	749: use
	750: a
	751: simple
	752: integer
	753: index
	754: for
	755: the
	756: table
	757: when
	758: using
	759: colors
	760: as
	761: there
	762: may
	763: be
	764: inconsistencies
	765: otherwise.
	766: Writing
	767: DataExplore
	768: PluginsÂ¶
	769: Plugins
	770: are
	771: for
	772: adding
	773: custom
	774: functionality
	775: that
	776: is
	777: not
	778: present
	779: in
	780: the
	781: main
	782: application.
	783: They
	784: are
	785: implemented
	786: by
	787: sub-classing
	788: the
	789: Plugin
	790: class
	791: in
	792: the
	793: plugin
	794: module.
	795: This
	796: is
	797: a
	798: python
	799: script
	800: that
	801: can
	802: generally
	803: contain
	804: any
	805: code
	806: you
	807: wish.
	808: Usually
	809: the
	810: idea
	811: will
	812: be
	813: to
	814: implement
	815: a
	816: dialog
	817: that
	818: the
	819: user
	820: interacts
	821: with.
	822: But
	823: this
	824: could
	825: also
	826: be
	827: a
	828: single
	829: method
	830: that
	831: runs
	832: on
	833: the
	834: current
	835: table
	836: or
	837: all
	838: sheets
	839: at
	840: once.
	841: Implementing
	842: a
	843: pluginÂ¶
	844: Plugins
	845: should
	846: inherit
	847: from
	848: the
	849: Plugin
	850: class.
	851: Though
	852: this
	853: is
	854: not
	855: strictly
	856: necessary
	857: for
	858: the
	859: plugin
	860: to
	861: function.
	862: from
	863: pandastable.plugin
	864: import
	865: Plugin
	866: You
	867: can
	868: simply
	869: copy
	870: the
	871: example
	872: plugin
	873: to
	874: get
	875: started.
	876: All
	877: plugins
	878: need
	879: to
	880: have
	881: a
	882: main()
	883: method
	884: which
	885: is
	886: called
	887: by
	888: the
	889: application
	890: to
	891: launch
	892: them.
	893: By
	894: default
	895: this
	896: method
	897: contains
	898: the
	899: _doFrame()
	900: method
	901: which
	902: constructs
	903: a
	904: main
	905: frame
	906: as
	907: part
	908: of
	909: the
	910: current
	911: table
	912: frame.
	913: Usually
	914: you
	915: override
	916: main()
	917: and
	918: call
	919: _doFrame
	920: then
	921: add
	922: your
	923: own
	924: custom
	925: code
	926: with
	927: your
	928: widgets.
	929: _doFrame
	930: method
	931: has
	932: the
	933: following
	934: lines
	935: which
	936: are
	937: always
	938: needed
	939: unless
	940: it
	941: is
	942: a
	943: non
	944: GUI
	945: plugin:
	946: self.table
	947: =
	948: self.parent.getCurrentTable()
	949: #get
	950: the
	951: current
	952: table
	953: #add
	954: the
	955: plugin
	956: frame
	957: to
	958: the
	959: table
	960: parent
	961: self.mainwin
	962: =
	963: Frame(self.table.parentframe)
	964: #pluginrow
	965: is
	966: 6
	967: to
	968: make
	969: the
	970: frame
	971: appear
	972: below
	973: other
	974: widgets
	975: self.mainwin.grid(row=pluginrow,column=0,columnspan=2,sticky='news')
	976: You
	977: can
	978: also
	979: override
	980: the
	981: quit()
	982: and
	983: about()
	984: methods.
	985: Non-table
	986: based
	987: pluginsÂ¶
	988: Plugins
	989: that
	990: donât
	991: rely
	992: on
	993: using
	994: the
	995: table
	996: directly
	997: do
	998: not
	999: need
	1000: to
	1001: use
	1002: the
	1003: above
	1004: method
	1005: and
	1006: can
	1007: have
	1008: essentially
	1009: anything
	1010: in
	1011: them
	1012: as
	1013: long
	1014: as
	1015: there
	1016: is
	1017: a
	1018: main()
	1019: method
	1020: present.
	1021: The
	1022: Batch
	1023: File
	1024: Rename
	1025: plugin
	1026: is
	1027: an
	1028: example.
	1029: This
	1030: is
	1031: a
	1032: standalone
	1033: utility
	1034: launched
	1035: in
	1036: a
	1037: separate
	1038: toplevel
	1039: window.
	1040: see
	1041: https://github.com/dmnfarrell/pandastable/blob/master/pandastable/plugins/rename.py
	1042: Freezing
	1043: the
	1044: appÂ¶
	1045: Dataexplore
	1046: is
	1047: available
	1048: as
	1049: an
	1050: exe
	1051: with
	1052: msi
	1053: installer
	1054: for
	1055: Windows.
	1056: This
	1057: was
	1058: created
	1059: using
	1060: the
	1061: cx_freeze
	1062: package.
	1063: For
	1064: anyone
	1065: wishing
	1066: to
	1067: freeze
	1068: their
	1069: tkinter
	1070: app
	1071: some
	1072: details
	1073: are
	1074: given
	1075: here.
	1076: This
	1077: is
	1078: a
	1079: rather
	1080: hit
	1081: and
	1082: miss
	1083: process
	1084: as
	1085: it
	1086: seems
	1087: to
	1088: depend
	1089: on
	1090: your
	1091: installed
	1092: version
	1093: of
	1094: Python.
	1095: Even
	1096: when
	1097: the
	1098: msi/exe
	1099: builds
	1100: you
	1101: need
	1102: to
	1103: check
	1104: for
	1105: runtime
	1106: issues
	1107: on
	1108: another
	1109: copy
	1110: of
	1111: windows
	1112: to
	1113: make
	1114: sure
	1115: itâs
	1116: working.
	1117: Steps:
	1118: Use
	1119: a
	1120: recent
	1121: version
	1122: of
	1123: python
	1124: (>=3.6
	1125: recommended)
	1126: installed
	1127: as
	1128: normal
	1129: and
	1130: then
	1131: using
	1132: pip
	1133: to
	1134: install
	1135: the
	1136: dependencies
	1137: that
	1138: you
	1139: normally
	1140: need
	1141: to
	1142: run
	1143: the
	1144: app.
	1145: The
	1146: freeze
	1147: script
	1148: is
	1149: found
	1150: in
	1151: the
	1152: main
	1153: pandastable
	1154: folder,
	1155: freeze.py.
	1156: You
	1157: can
	1158: adopt
	1159: it
	1160: for
	1161: your
	1162: own
	1163: app.
	1164: Run
	1165: the
	1166: script
	1167: using
	1168: python
	1169: freeze.py
	1170: bdist_msi
	1171: The
	1172: resulting
	1173: msi
	1174: is
	1175: placed
	1176: in
	1177: the
	1178: dist
	1179: folder.
	1180: This
	1181: is
	1182: a
	1183: 32
	1184: bit
	1185: binary
	1186: but
	1187: should
	1188: run
	1189: fine
	1190: on
	1191: windows
	1192: 10.
	1193: You
	1194: can
	1195: probably
	1196: use
	1197: Anaconda
	1198: to
	1199: do
	1200: the
	1201: same
	1202: thing
	1203: but
	1204: we
	1205: have
	1206: not
	1207: tested
	1208: this.
	1209: Next
	1210: Previous
	1211: ©
	1212: Copyright
	1213: 2014-,
	1214: Damien
	1215: Farrell
	1216: Revision
	1217: e9cc5904.
	1218: Built
	1219: with
	1220: Sphinx
	1221: using
	1222: a
	1223: theme
	1224: provided
	1225: by
	1226: Read
	1227: the
	1228: Docs.
	1229: Read
	1230: the
	1231: Docs
	1232: v:
	1233: latest
	1234: Versions
	1235: latest
	1236: Downloads
	1237: pdf
	1238: html
	1239: epub
	1240: On
	1241: Read
	1242: the
	1243: Docs
	1244: Project
	1245: Home
	1246: Builds
	1247: Free
	1248: document
	1249: hosting
	1250: provided
	1251: by
	1252: Read
	1253: the
	1254: Docs.
